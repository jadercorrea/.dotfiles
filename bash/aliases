 update_bash(){
	ln -nfs ~/.dotfiles/git/gitconfig ~/.gitconfig
	ln -nfs ~/.dotfiles/git/githelpers ~/.githelpers
	ln -nfs ~/.dotfiles/vim/vimrc ~/.vimrc
	ln -nfs ~/.dotfiles/vim/vimrc.bundles ~/.vimrc.bundles
	ln -nfs ~/.dotfiles/tmux/tmux.conf ~/.tmux.conf
	ln -nfs ~/.dotfiles/pry/pryrc ~/.pryrc
	ln -nfs ~/.dotfiles/ag/agignore ~/.agignore

  if [ -f ~/.bashrc ]; then
    source ~/.bashrc
  else
    source ~/.bash_profile
  fi
}

alias update_hosts='dscacheutil -flushcache'

if [ -f ~/.bashrc ]; then
  alias ubp='echo "Updating ~/.bashrc..." && source ~/.bashrc && update_bash'
else
  alias ubp='echo "Updating ~/.bash_profile..." && source ~/.bash_profile && update_bash'
fi

source ~/.dotfiles/bash/git-completion.bash

# Projects
alias mtl='session mtl'
alias tax='session tax-compliance'
alias compras='session compras'
alias nfe='session nfe'
alias pair='session pair'
alias qa-psql='heroku pg:psql --app mesalva-backend-api-qa HEROKU_POSTGRESQL_COBALT'
alias integration='sh bin/integration'

# System
alias ls='ls -G'
alias .='change_dir'
alias ..='cd ..'
alias count_files='find ./ -maxdepth 1 -type d | while read -r dir; do printf "%s:\t" "$dir"; find "$dir" | wc -l; done'
alias ip='ipconfig getifaddr en0'
alias x='exit'
alias ll='ls -la'
alias ds_store='sudo find / -name ".DS_Store" -depth -exec rm {} \;'
alias envs='cat .env | sed -e "s/^/export /" | tee -a envs.sh && source envs.sh'

# Processes
alias tu='top -o cpu'
alias tm='top -o mem'

# Misc
alias irc='/Applications/MacIrssi.app/Contents/MacOS/MacIrssi'

# Apache
alias apache='sudo /etc/init.d/apache2'
# Postgres
alias pg='pg_ctl -D /usr/local/var/postgres -l ~/.pg.log start'
# MongoDb
alias mdb='sudo mongod --fork --logpath /var/log/mongod.log'
# MySql
alias mys='mysql.server start'
#Redis
alias red='redis-server &'
alias red-clear='redis-cli config set save ""'

# cURL
alias api-get="curl -i -H 'Content-Type: application/json' "
alias api-post="curl -i -H 'Content-Type: application/json' -X POST -d "
alias api-put="curl -i -H 'Content-Type: application/json' -X PUT -d "
alias api-delete="curl -i -H 'Content-Type: application/json' -X DELETE "

# Rails helpers
#
# Redirects port 80 on a Mac to 3000, allowing to run the server without root
alias railson80='sudo ipfw add 100 fwd 127.0.0.1,3000 tcp from any to any 80 in'

# Removes the redirection from port 80 to 3000
alias railsnoton80='sudo ipfw flush'
alias dbmigrate='echo "Running rake db:migrate db:test:prepare" && be rake db:migrate db:test:prepare'
alias capst='echo "Running be cap staging deploy:migrations" && be cap staging deploy:migrations'
alias capstaging='capst'
alias capprod='echo "Running be cap production deploy:migrations" && be cap production deploy:migrations'

# Git
alias master='git checkout master'
alias g='git status'
alias ga='git add . && git add . -u && git status'
alias gb='git branch'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl="git log --pretty=format:'%C(yellow)%h %C(blue)<<%an>> %C(black)%ad%C(yellow)%d%Creset %s %Creset' --date=short --abbrev-commit | sed -e 's/<<\([A-Za-z]\).* \([A-Za-z]\).*>>/<\1\2>/' | sed ''/Merge/s//`printf "\033[31mMerge\033[0m"`/'' | sed ''/Revert/s//`printf "\033[31mRevert\033[0m"`/'' | less -rX"
alias gdm='git diff master'

	# Commit pending changes and quote all args as message
  function gc(){ echo "Do you mean gco?"; }
  function gco(){ git commit -v -m "$*"; }
  function gch(){ git checkout $*; }

  # rmr = Rebase Master Rebase
	function rmr(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

    echo Checking out master, rebasing and returning to $CURRENT_BRANCH...
		git checkout master
    git pull --rebase origin master
		git checkout $CURRENT_BRANCH
    git rebase master
	}

	function gfacepunch(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Face punching to origin $CURRENT_BRANCH...
		git push --force origin $CURRENT_BRANCH
	}

	function gpush(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pushing to origin $CURRENT_BRANCH...
		git push origin $CURRENT_BRANCH
	}

  # Removes branch local and remotely
	function gdestroy(){
    if (($#)); then
      BRANCH=$*
    else
      BRANCH=`git rev-parse --abbrev-ref HEAD`
      git checkout master
    fi
		echo Deleting from origin $BRANCH...
		git push origin :$BRANCH
    echo Deleting local $BRANCH
    git branch -D $BRANCH
	}

	function glocaldel(){
    if ((!$#)); then
      echo No option given. Add -d or -D to the command
      return 0
    fi

    git checkout master
		BRANCHES=`comm -23 <(git branch -l | grep -v master | sed 's/^ *//g') <(git branch -r | grep origin | sed 's/.*\///')`

    for branch in $BRANCHES; do
      echo Removing branch ${branch%%}
      `git branch $1 ${branch%%} --quiet`
    done
	}

	function gpr(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pulling origin/$CURRENT_BRANCH, rebasing on it and fetching origin...
		git pull --rebase origin $CURRENT_BRANCH && git fetch origin
	}

	function gpul(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pulling from origin $CURRENT_BRANCH...
		git pull origin $CURRENT_BRANCH
	}

	alias gpull=gpul

# Development
function spn(){ time rspec $*; }
function spna(){ time rspec spec_no_rails/ $*; }
function be(){ time bundle exec $*; }
function ber(){ echo 'Running all tests in spec/' && time bundle exec rspec spec/ $*; }
function spr(){ echo 'Running all tests in spec/requests/' && time bundle exec rspec spec/requests/ $*; }
function spa(){ echo 'Running all tests in spec/acceptance/' && time bundle exec rspec spec/acceptance/ $*; }
function spu(){ echo 'Running all tests in spec/unit/' && time rspec spec/unit/ $*; }
function spc(){ echo 'Running all tests in spec/controllers/' && time bundle exec rspec spec/controllers/ $*; }
function spm(){ echo 'Running all tests in spec/models/' && time bundle exec rspec spec/models/ $*; }
function spl(){ echo 'Running all tests in spec/lib/' && time bundle exec rspec spec/lib/ $*; }

function spec-diff() {
  bundle exec rspec $(git ls-files -m | xargs ls -1 2>/dev/null | grep 'spec\.rb$')
}

function diff-cop() {
  cops=(rubocop reek)
  for i in "${cops[@]}"
  do
    echo ""
    echo Running ${i%%} verification
    git ls-files -m | xargs ls -1 2>/dev/null | grep '\.rb$' | xargs "$i"
  done
}

function t(){
  SPEC_PATH='spec/'
  if [ ! -z "$*" ]; then
    SPEC_PATH="$*"
  fi
  echo "Running all tests in $SPEC_PATH" && time bundle exec rspec $SPEC_PATH
}
function tf(){
  SPEC_PATH='spec/'
  if [ ! -z "$*" ]; then
    SPEC_PATH="$*"
  fi
  echo "Running all tests in $SPEC_PATH and failing-fast" && time bundle exec rspec $SPEC_PATH --fail-fast 2> >(grep -v CoreText 1>&2);
}
function tsay(){ echo 'Running all tests in spec/ and then shouting at you' && time bundle exec rspec spec/ $* && echo 'SPECS ARE DONE! GET BACK HERE!'|espeak; }

# checks the complexity of a file in HEAD~1
function floggg(){
  echo "Before:" && git show HEAD:$* | cat > ~/.flog_tmp && flog ~/.flog_tmp | grep "flog total" && rm ~/.flog_tmp;
  echo "";
  echo "After:" && flog $* | grep "flog total";
}

# Zeus
  alias zst='zeus start'
  alias zstop='rm .zeus.sock'
  alias zsts='(tmux send-keys -t 8 "zse" C-m &) && zst'
  alias zse='zeus server'
  alias zco='zeus console'
  function zra(){ zeus rake $*; }
  alias zro='zeus rake routes'
  alias zmi='zeus rake db:migrate db:test:prepare'
  alias zer='time zeus rspec spec/'
  function zrs(){ time zeus rspec $*; }
  alias zspl='time zeus rspec spec/lib/'
  alias zspc='time zeus rspec spec/controllers/'
  alias zspm='time zeus rspec spec/models/'
  alias zspa='time zeus rspec spec/acceptance/'
  alias zspr='time zeus rspec spec/request/'

# Spring gem
  alias sse='spring rails server'
  alias sco='spring rails console'
  function sra(){ spring rake $*; }
  alias sro='spring rake routes'
  alias smi='spring rake db:migrate db:test:prepare'
  alias ser='time spring rspec spec/'

# Tmux
#
# execute_in_all_panes "echo OH HAI"
function tmuxa(){ tmux attach -t $*; }
function tmuxn(){ tmux new-session -s $*; }
function tmuxk(){ tmux kill-session -t $*; }

# Sublime
alias sub='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'

# General commands
function grepp(){
  grep -Rni --exclude=".//node_modules*" --exclude=".//db/data*" --exclude=".//tmp*" --exclude=".//vendor*" --exclude=".//coverage*" --exclude=".//log*" --exclude=".//tag*" --exclude=".//spec*/vcr*" --exclude=".//spec*/cassett*" --exclude=".//public/*.js*" --exclude=".//.*" --exclude="./db/data*" --exclude="./tmp*" --exclude="./vendor*" --exclude="./coverage*" --exclude="./log*" --exclude="./tag*" --exclude="./spec*/cassett*" --exclude="./public/*.js*" --exclude="./.*" "$*" ./
}

function findd(){
  find . -ipath "*$**"
}

function superkill(){
  kill -9 `ps aux | grep $* | awk '{print $2}'`
}

function ,f() {
  vim $(git ls-files|selecta)
}

function ffiles() {
  find . -name \* -print | selecta
}

function zooppa_db_restore() {
  if ((!$#)); then
    echo Getting most recent backup
    S3_URI=`s3cmd ls s3://dbbackup.zooppa.com/ZooppaProduction.ZooppaRails4/ | tail -1 | awk '{print $4}'`

    echo Downloading:
    s3cmd get $S3_URI $(pwd)"/temp.sql.gz"
    BACKUP_FILE="temp.sql.gz"
  else
    BACKUP_FILE=$*
  fi

  echo Unpacking and restoring on zooppa_development database

  gunzip < $BACKUP_FILE | mysql -u root -p -h localhost zooppa_development

  echo Deleting backup file
  rm $BACKUP_FILE
  echo Database restore completed
}

function compiler() {
  echo Compiling and publishing modules locally
  cd $*
  for i in $(ls -d */); do
    subdir=0
    cd ${i%%/}
    if [ ! -f build.sbt ]; then
      subdir=1
      cd project-code
    fi
    echo Compiling ${i%%/} module
    activator compile
    echo Puslishing ${i%%/} module
    activator publishLocal
    if (($subdir)); then
      cd ..
    fi
    cd ..
  done
  echo Compilation complete
}

function architecture_build() {
  compiler ~/www/ilegra/vale-taxcompliance/architecture
}

function tax-compliance_build() {
   cd ~/www/ilegra/vale-taxcompliance/tax-compliance
   git up
   bash buildLocal
}

function contribute() {
  if (($#)); then
    cd ~/www/open_source
    git clone $*
    [[ $* =~ [^\/][\w]+(?=\.git) ]] && cd $BASH_REMATCH
    echo Bundling
    bundle install
    echo Done!
    echo ${BASH_REMATCH[1]}
    echo $BASH_REMATCH
  else
    echo No repo given to clone
  fi
}

function ping_log() {
  ping -i 1 -c 3600 8.8.8.8 | while read pong; do echo "$(date +%Y-%m-%d_%H%M%S): $pong"; done >/Users/jadercorrea/Documents/logs/ping.log
}

function migrate() {
  be rake db:migrate
  be rake db:migrate RAILS_ENV=test
}

function rollback() {
  be rake db:rollback
  be rake db:rollback RAILS_ENV=test
}

function remigrate() {
  rollback
  migrate
}

function adhoc() {
  cd ~/www/projects/adhoc
  pg
  red
  git up
  bundle
  migrate
  tmux | teamocil adhoc
}

function change_dir() {
  cd $*
}

function add_pair() {
  if (($#)); then
    sudo dscl . -append /Users/$USER RecordName Pair pair
    sudo sed -E -i.bak 's/^#?(PasswordAuthentication|ChallengeResponseAuthentication).*$/\1 no/' /etc/sshd_config
    touch ~/.ssh/authorized_keys
    gh-auth add --users $* --command="$( which tmux ) attach -t pair"
  else
    echo Inform a github username to add as a pair
  fi
}

function session() {
  if (($#)); then
    tmux new -s $* | tmux attach -t $* | teamocil $*
  else
    echo Inform a session configuration name
  fi
}

function me-salva() {
  cd ~/www/me_salva/front
  git up
  cd ~/www/me_salva/backend-api
  pg
  red
  git up
  bundle
  migrate
  session me_salva
}
